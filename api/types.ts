/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current authenticated user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Current user information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/facilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get facilities for authenticated user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of facilities */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Facility"][];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/facilities/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all facilities in the system */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Complete list of facilities */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Facility"][];
                    };
                };
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/facilities/provinces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all provinces */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of provinces */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/facilities/districts/{province}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get districts by province */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @example Lusaka */
                    province: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of districts in the province */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/facilities/byDistrict/{district}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get facilities by district */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @example Lusaka District */
                    district: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of facilities in the district */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Facility"][];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/facilities/byProvince/{province}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get facilities by province */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @example Lusaka */
                    province: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of facilities in the province */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Facility"][];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/patients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get patients with optional search and pagination */
        get: {
            parameters: {
                query?: {
                    /** @description Search by patient name */
                    name?: string;
                    /** @description Search by NRC number */
                    nrc?: string;
                    /** @description Search by NUPIN */
                    nupin?: string;
                    /** @description Search by cellphone number */
                    cellphone?: string;
                    /** @description Filter by sex */
                    sex?: "Male" | "Female";
                    /** @description Minimum age filter */
                    minAge?: number;
                    /** @description Maximum age filter */
                    maxAge?: number;
                    /** @description Number of results to return */
                    limit?: number;
                    /** @description Field to sort by */
                    sort?: string;
                    /** @description Sort order */
                    order?: "asc" | "desc";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of patients */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Patient"][];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        /** Create new patient */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PatientCreate"];
                };
            };
            responses: {
                /** @description Patient created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Patient"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                /** @description Patient already exists (NRC or phone number conflict) */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConflictError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/patients/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get patient by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @example 1001 */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Patient details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Patient"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/patients/check-nrc/{nrc}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if NRC already exists */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @example 123456/78/9 */
                    nrc: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description NRC is available */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example false */
                            exists?: boolean;
                            /** @example NRC is available */
                            message?: string;
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                /** @description NRC already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            exists?: boolean;
                            /** @example A patient with this NRC already exists */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/patients/check-phone/{phoneNumber}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if phone number already exists */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @example 0977123456 */
                    phoneNumber: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Phone number is available */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example false */
                            exists?: boolean;
                            /** @example Phone number is available */
                            message?: string;
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                /** @description Phone number already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/patients/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search patients by specific criteria */
        get: {
            parameters: {
                query: {
                    /** @description Type of search to perform */
                    type: "nrc" | "nupin" | "cellphone" | "name";
                    /** @description Search query string */
                    query: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Search results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Patient"][];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/patients/{id}/art-followup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create ART follow-up record */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ARTFollowUp"];
                };
            };
            responses: {
                /** @description ART follow-up created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ARTFollowUp"];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/patients/{id}/prescriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create prescription for patient */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Prescription"];
                };
            };
            responses: {
                /** @description Prescription created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Prescription"];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/clinical-analysis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Analyze clinical data using AI */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ClinicalAnalysisRequest"];
                };
            };
            responses: {
                /** @description Clinical analysis results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClinicalAnalysisResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/adverse-reaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Analyze adverse drug reactions */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AdverseReactionRequest"];
                };
            };
            responses: {
                /** @description Adverse reaction analysis */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AdverseReactionResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/task-recommendations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate AI task recommendations */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TaskRecommendationRequest"];
                };
            };
            responses: {
                /** @description Task recommendations */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskRecommendationResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transfers/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search for optimal transfer routes */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TransferRequest"];
                };
            };
            responses: {
                /** @description Transfer route options */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TransferSearchResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transfers/initiate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Initiate patient transfer */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TransferInitiateRequest"];
                };
            };
            responses: {
                /** @description Transfer initiated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TransferInitiateResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transfers/facilities/{radius}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get facilities within radius */
        get: {
            parameters: {
                query: {
                    /** @description Latitude coordinate */
                    lat: number;
                    /** @description Longitude coordinate */
                    lon: number;
                };
                header?: never;
                path: {
                    /** @description Search radius in kilometers */
                    radius: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Facilities within radius */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FacilitiesInRadiusResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transfers/capacity-update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update facility capacity */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CapacityUpdateRequest"];
                };
            };
            responses: {
                /** @description Capacity updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            message?: string;
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all users (Admin only) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserSanitized"][];
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create new user (Admin only) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserCreate"];
                };
            };
            responses: {
                /** @description User created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserSanitized"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            /** @example 1 */
            id?: number;
            /** @example Kuwani */
            username?: string;
            /**
             * @example Clinician
             * @enum {string}
             */
            role?: "SystemAdministrator" | "FacilityAdministrator" | "Clinician" | "Trainer";
            /** @example Chikando Rural Health Centre */
            facility?: string;
            /** @example CHK001 */
            facilityCode?: string;
            /** @example false */
            isAdmin?: boolean;
            /**
             * Format: email
             * @example kuwani@example.com
             */
            email?: string;
            /** @example Dr. Kuwani Mwanza */
            fullName?: string;
            /** @example [
             *       "ANC_Service",
             *       "MedicalEncounter"
             *     ] */
            permissions?: string[];
            /** Format: date-time */
            lastLogin?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        UserSanitized: components["schemas"]["User"] & {
            readonly password?: unknown;
        };
        UserCreate: {
            username: string;
            password: string;
            /** @enum {string} */
            role: "SystemAdministrator" | "FacilityAdministrator" | "Clinician" | "Trainer";
            facility?: string;
            facilityCode?: string;
            /** @default false */
            isAdmin: boolean;
            /** Format: email */
            email?: string;
            fullName?: string;
            permissions?: string[];
        };
        Facility: {
            /** @example 1 */
            id?: number;
            /** @example Chikando Rural Health Centre */
            name?: string;
            /** @example CHK001 */
            code?: string;
            /** @example Rural Health Centre */
            type?: string;
            /** @example Lusaka */
            province?: string;
            /** @example Chongwe */
            district?: string;
            /** @example -15.4067 */
            latitude?: number;
            /** @example 28.2833 */
            longitude?: number;
            /** @example [
             *       "ANC",
             *       "Family Planning",
             *       "General Medicine"
             *     ] */
            services?: string[];
            capacity?: {
                beds?: number;
                maternity?: number;
                pediatric?: number;
            };
            contactInfo?: {
                phone?: string;
                email?: string;
            };
            /** @example true */
            isActive?: boolean;
        };
        Patient: {
            /** @example 1001 */
            id?: number;
            /** @example Chikando Rural Health Centre */
            facility?: string;
            /** @example Angela */
            firstName?: string;
            /** @example Phiri */
            surname?: string;
            /**
             * Format: date
             * @example 1998-11-25
             */
            dateOfBirth?: string;
            /**
             * @example Female
             * @enum {string}
             */
            sex?: "Male" | "Female";
            /** @example 181/1/1 */
            nrc?: string;
            /** @example Zambia */
            country?: string;
            /** @example 0977123456 */
            cellphone?: string;
            /** @example false */
            isEstimatedDob?: boolean;
            /** @example false */
            noNrc?: boolean;
            /** Format: date-time */
            registrationDate?: string;
            /** Format: date-time */
            lastUpdated?: string;
            area?: string;
            houseNumber?: string;
            roadStreet?: string;
            cityTownVillage?: string;
            landmarks?: string;
            napsa?: string;
            nupin?: string;
            underFiveCardNumber?: string;
            otherCellphone?: string;
            landline?: string;
            /** Format: email */
            email?: string;
            /** @example Carol */
            mothersName?: string;
            mothersSurname?: string;
            /** @example false */
            motherDeceased?: boolean;
            mothersNrc?: string;
            mothersNapsaPspf?: string;
            /** @example Zambia */
            mothersNationality?: string;
            fathersName?: string;
            fathersSurname?: string;
            fatherDeceased?: boolean;
            fathersNrc?: string;
            fathersNapsaPspf?: string;
            fathersNationality?: string;
            guardianName?: string;
            guardianSurname?: string;
            guardianRelationship?: string;
            guardianNrc?: string;
            guardianNapsaPspf?: string;
            guardianNationality?: string;
            /** @enum {string} */
            maritalStatus?: "Single" | "Married" | "Divorced" | "Widowed" | "Separated";
            spouseFirstName?: string;
            spouseSurname?: string;
            homeLanguage?: string;
            otherHomeLanguage?: string;
            isBornInZambia?: boolean;
            provinceOfBirth?: string;
            districtOfBirth?: string;
            birthPlace?: string;
            religiousCategory?: string;
            religiousDenomination?: string;
            otherReligiousDenomination?: string;
            educationLevel?: string;
            otherEducationLevel?: string;
            occupation?: string;
            otherOccupation?: string;
        };
        PatientCreate: {
            firstName: string;
            surname: string;
            /** Format: date */
            dateOfBirth: string;
            /** @enum {string} */
            sex: "Male" | "Female";
            nrc?: string;
            /** @default Zambia */
            country: string;
            cellphoneNumber?: string;
            /** @default false */
            isEstimatedDob: boolean;
            /** @default false */
            noNrc: boolean;
            mothersName: string;
            mothersSurname: string;
        };
        ARTFollowUp: {
            patientId?: number;
            /** Format: date */
            visitDate?: string;
            /** @enum {string} */
            adherence?: "Good" | "Fair" | "Poor";
            sideEffects?: string[];
            viralLoad?: number;
            cd4Count?: number;
            /** Format: date */
            nextAppointment?: string;
            notes?: string;
        };
        Prescription: {
            patientId?: number;
            medication?: string;
            dosage?: string;
            frequency?: string;
            duration?: string;
            instructions?: string;
            prescribedBy?: string;
            /** Format: date-time */
            prescriptionDate?: string;
        };
        ClinicalAnalysisRequest: {
            patientData?: Record<string, never>;
            clinicalData?: Record<string, never>;
            /** @enum {string} */
            analysisType?: "risk_assessment" | "diagnosis_support" | "treatment_recommendation";
        };
        ClinicalAnalysisResponse: {
            /** @enum {string} */
            riskLevel?: "Low" | "Moderate" | "High" | "Critical";
            recommendations?: string[];
            confidence?: number;
            alerts?: components["schemas"]["ClinicalAlert"][];
        };
        AdverseReactionRequest: {
            patientId?: number;
            medication?: string;
            symptoms?: string[];
            /** @enum {string} */
            severity?: "Mild" | "Moderate" | "Severe";
            /** Format: date */
            onsetDate?: string;
        };
        AdverseReactionResponse: {
            severity?: string;
            /** @enum {string} */
            probability?: "Certain" | "Probable" | "Possible" | "Unlikely";
            recommendations?: string[];
            requiresReporting?: boolean;
        };
        TaskRecommendationRequest: {
            clinicalContext?: Record<string, never>;
            patientConditions?: string[];
            currentWorkload?: Record<string, never>;
        };
        TaskRecommendationResponse: {
            prioritizedTasks?: {
                task?: string;
                /** @enum {string} */
                priority?: "High" | "Medium" | "Low";
                timeframe?: string;
                reasoning?: string;
            }[];
        };
        TransferRequest: {
            patientId?: number;
            /** @enum {string} */
            urgency?: "Emergency" | "Urgent" | "Routine";
            requiredServices?: string[];
            specialization?: string;
            /** @enum {string} */
            transportType?: "Ambulance" | "Helicopter" | "Ground";
            originFacility?: string;
            maxDistance?: number;
            medicalCondition?: string;
        };
        TransferSearchResponse: {
            success?: boolean;
            routes?: components["schemas"]["TransferRoute"][];
            message?: string;
        };
        TransferRoute: {
            facility?: components["schemas"]["Facility"];
            score?: number;
            distance?: number;
            estimatedCost?: number;
            travelTime?: string;
            reasoning?: string;
            capacity?: Record<string, never>;
            services?: string[];
        };
        TransferInitiateRequest: {
            selectedRoute?: components["schemas"]["TransferRoute"];
            patientId?: number;
            urgency?: string;
            medicalCondition?: string;
            accompaniedBy?: string;
        };
        TransferInitiateResponse: {
            success?: boolean;
            transferId?: string;
            transferPlan?: Record<string, never>;
            message?: string;
        };
        FacilitiesInRadiusResponse: {
            success?: boolean;
            facilities?: components["schemas"]["Facility"][];
            radius?: number;
        };
        CapacityUpdateRequest: {
            facilityId?: string;
            occupancyUpdate?: {
                beds?: number;
                maternity?: number;
                pediatric?: number;
            };
        };
        ClinicalAlert: {
            /** @enum {string} */
            severity?: "Critical" | "High" | "Medium" | "Info" | "Milestone";
            title?: string;
            message?: string;
            condition?: string;
            recommendations?: string[];
            requiresReferral?: boolean;
            /** Format: date-time */
            timestamp?: string;
        };
        ErrorResponse: {
            message?: string;
            error?: string;
            /** Format: date-time */
            timestamp?: string;
        };
        ConflictError: {
            message?: string;
            exists?: boolean;
            field?: string;
        };
    };
    responses: {
        /** @description Bad request - invalid parameters or request body */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Authentication required */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example Unauthorized */
                    message?: string;
                };
            };
        };
        /** @description Access forbidden - insufficient privileges */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example Admin access required */
                    message?: string;
                };
            };
        };
        /** @description Resource not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example Patient not found */
                    message?: string;
                };
            };
        };
        /** @description Resource already exists */
        Conflict: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ConflictError"];
            };
        };
        /** @description Internal server error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
