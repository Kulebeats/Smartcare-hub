import React from 'react';
import { 
  User, 
  Heart, 
  Stethoscope, 
  TestTube, 
  MessageSquare, 
  ArrowRight, 
  Shield, 
  Users,
  Activity,
  Calendar,
  Clock,
  Star,
  ChevronDown,
  TrendingUp,
  AlertTriangle
} from 'lucide-react';

// Custom animation hook using CSS transitions
const useAnimation = (isActive, delay = 0) => {
  const [shouldAnimate, setShouldAnimate] = React.useState(false);
  
  React.useEffect(() => {
    const timer = setTimeout(() => setShouldAnimate(true), delay);
    return () => clearTimeout(timer);
  }, [delay]);

  return shouldAnimate;
};

// Enhanced Dock component with smooth highlighting
const EnhancedDock = ({ items, currentTab, onTabChange }) => {
  const [highlightStyle, setHighlightStyle] = React.useState({});
  const containerRef = React.useRef(null);
  const itemRefs = React.useRef({});

  React.useEffect(() => {
    const activeItem = itemRefs.current[currentTab];
    if (activeItem && containerRef.current) {
      const containerRect = containerRef.current.getBoundingClientRect();
      const itemRect = activeItem.getBoundingClientRect();
      
      setHighlightStyle({
        transform: `translateX(${itemRect.left - containerRect.left}px)`,
        width: `${itemRect.width}px`,
        height: `${itemRect.height}px`,
        opacity: 1,
      });
    }
  }, [currentTab]);

  return (
    <div 
      ref={containerRef}
      className="relative flex items-center gap-2 p-3 bg-white/90 backdrop-blur-xl rounded-2xl border border-white/20 shadow-2xl"
    >
      {/* Animated highlight background */}
      <div
        className="absolute bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl shadow-lg transition-all duration-300 ease-out z-0"
        style={highlightStyle}
      />
      
      {items.map((item) => (
        <button
          key={item.id}
          ref={el => itemRefs.current[item.id] = el}
          onClick={() => onTabChange(item.id)}
          className={`
            group relative flex items-center justify-center w-14 h-14 rounded-xl
            transition-all duration-300 ease-out transform z-10
            hover:scale-105 hover:-translate-y-0.5
            ${currentTab === item.id 
              ? 'text-white shadow-lg' 
              : 'text-gray-600 hover:text-blue-600'
            }
          `}
          aria-label={item.label}
        >
          <div className="relative z-20 transition-transform duration-200 group-hover:scale-110">
            {item.icon}
          </div>
          
          {/* Enhanced tooltip */}
          <div className="absolute -top-16 left-1/2 transform -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-all duration-300 pointer-events-none z-30 group-hover:translate-y-0 translate-y-2">
            <div className="bg-gray-900/95 backdrop-blur-sm text-white text-xs font-medium rounded-xl py-2 px-3 shadow-2xl border border-gray-700/50">
              <div className="whitespace-nowrap">{item.label}</div>
              <div className="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-l-transparent border-r-transparent border-t-gray-900/95"></div>
            </div>
          </div>

          {/* Status indicators */}
          {item.priority === 'high' && currentTab === item.id && (
            <div className="absolute -top-1 -right-1 w-3 h-3 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full shadow-lg animate-pulse">
              <Star size={8} className="text-white absolute inset-0 m-auto" />
            </div>
          )}
        </button>
      ))}
    </div>
  );
};

// Animated progress dots
const ProgressDots = ({ items, currentTab, completionStatus = {} }) => {
  return (
    <div className="flex items-center gap-2 bg-white/70 backdrop-blur-sm px-4 py-2 rounded-full border border-white/40 shadow-lg">
      {items.filter(item => item.priority === 'high').map((item, index) => {
        const isActive = item.id === currentTab;
        const isCompleted = completionStatus[item.id];
        
        return (
          <div 
            key={item.id} 
            className="relative"
            style={{
              animation: `fadeInScale 0.5s ease-out ${0.7 + index * 0.1}s both`
            }}
          >
            <div
              className={`w-2 h-2 rounded-full transition-all duration-500 ${
                isActive 
                  ? 'bg-gradient-to-r from-blue-500 to-purple-600 scale-125 shadow-lg' 
                  : isCompleted 
                  ? 'bg-green-500 shadow-md'
                  : 'bg-gray-300 hover:bg-gray-400'
              }`}
            />
            {isActive && (
              <div className="absolute inset-0 w-2 h-2 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full animate-ping opacity-75" />
            )}
          </div>
        );
      })}
    </div>
  );
};

// Floating particles component
const FloatingParticles = () => {
  return (
    <div className="absolute inset-0 overflow-hidden pointer-events-none">
      <div className="absolute top-0 left-1/4 w-2 h-2 bg-blue-400/30 rounded-full animate-bounce" style={{ animationDelay: '0s' }} />
      <div className="absolute top-4 right-1/3 w-1 h-1 bg-purple-400/30 rounded-full animate-bounce" style={{ animationDelay: '0.5s' }} />
      <div className="absolute top-2 left-2/3 w-1.5 h-1.5 bg-pink-400/30 rounded-full animate-bounce" style={{ animationDelay: '1s' }} />
      <div className="absolute top-8 left-1/2 w-1 h-1 bg-cyan-400/30 rounded-full animate-bounce" style={{ animationDelay: '1.5s' }} />
    </div>
  );
};

interface ANCHeaderDockProps {
  currentTab?: string;
  onTabChange?: (tab: string) => void;
  patientName?: string;
  gestationalWeek?: number;
  nextAppointment?: string;
  riskLevel?: 'low' | 'medium' | 'high';
  completionStatus?: Record<string, boolean>;
}

export const ANCHeaderDock: React.FC<ANCHeaderDockProps> = ({ 
  currentTab = 'rapidAssessment',
  onTabChange = () => {},
  patientName = '',
  gestationalWeek = 0,
  nextAppointment = '',
  riskLevel = 'low',
  completionStatus = {}
}) => {
  const showBanner = useAnimation(true, 0);
  const showDock = useAnimation(true, 300);
  const showProgress = useAnimation(true, 600);

  const dockItems = [
    {
      id: 'rapidAssessment',
      icon: <User size={20} />,
      label: 'Rapid Assessment',
      priority: 'high',
      color: 'blue'
    },
    {
      id: 'clientProfile',
      icon: <Heart size={20} />,
      label: 'Client Profile',
      priority: 'high',
      color: 'rose'
    },
    {
      id: 'examination',
      icon: <Stethoscope size={20} />,
      label: 'Physical Examination',
      priority: 'high',
      color: 'emerald'
    },
    {
      id: 'labs',
      icon: <TestTube size={20} />,
      label: 'Laboratory Tests',
      priority: 'medium',
      color: 'purple'
    },
    {
      id: 'monitoring',
      icon: <Activity size={20} />,
      label: 'Fetal Monitoring',
      priority: 'high',
      color: 'orange'
    },
    {
      id: 'counseling',
      icon: <MessageSquare size={20} />,
      label: 'Health Education',
      priority: 'high',
      color: 'cyan'
    },
    {
      id: 'prep',
      icon: <Shield size={20} />,
      label: 'PrEP Services',
      priority: 'medium',
      color: 'indigo'
    },
    {
      id: 'pmtct',
      icon: <Users size={20} />,
      label: 'PMTCT Program',
      priority: 'high',
      color: 'teal'
    }
  ];

  const getRiskConfig = (risk: string) => {
    switch(risk) {
      case 'high': return {
        color: 'from-red-500 to-red-600',
        bg: 'bg-red-50 border-red-200',
        text: 'text-red-800',
        icon: <AlertTriangle size={16} className="text-red-600" />
      };
      case 'medium': return {
        color: 'from-yellow-500 to-orange-500',
        bg: 'bg-yellow-50 border-yellow-200',
        text: 'text-yellow-800',
        icon: <TrendingUp size={16} className="text-yellow-600" />
      };
      default: return {
        color: 'from-green-500 to-emerald-600',
        bg: 'bg-green-50 border-green-200',
        text: 'text-green-800',
        icon: <Star size={16} className="text-green-600" />
      };
    }
  };

  const riskConfig = getRiskConfig(riskLevel);

  return (
    <>
      <style jsx>{`
        @keyframes fadeInUp {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        @keyframes fadeInScale {
          from {
            opacity: 0;
            transform: scale(0);
          }
          to {
            opacity: 1;
            transform: scale(1);
          }
        }
        
        @keyframes slideInLeft {
          from {
            opacity: 0;
            transform: translateX(-20px);
          }
          to {
            opacity: 1;
            transform: translateX(0);
          }
        }
        
        @keyframes slideInRight {
          from {
            opacity: 0;
            transform: translateX(20px);
          }
          to {
            opacity: 1;
            transform: translateX(0);
          }
        }
        
        @keyframes float {
          0%, 100% { transform: translateY(0px) rotate(0deg); }
          50% { transform: translateY(-20px) rotate(180deg); }
        }
        
        @keyframes pulse-glow {
          0%, 100% { box-shadow: 0 0 20px rgba(59, 130, 246, 0.3); }
          50% { box-shadow: 0 0 40px rgba(59, 130, 246, 0.6); }
        }
      `}</style>
      
      <div className="sticky top-0 z-50">
        {/* Animated background with floating particles */}
        <div className="absolute inset-0 bg-gradient-to-br from-slate-50 via-blue-50/50 to-purple-50/30 backdrop-blur-xl">
          <div className="absolute inset-0 bg-white/40"></div>
          <FloatingParticles />
          {/* Larger background decorations */}
          <div className="absolute -top-10 -right-10 w-40 h-40 bg-blue-400/10 rounded-full blur-3xl" style={{ animation: 'float 8s ease-in-out infinite' }} />
          <div className="absolute top-1/3 -left-20 w-60 h-60 bg-purple-400/10 rounded-full blur-3xl" style={{ animation: 'float 10s ease-in-out infinite reverse' }} />
        </div>

        <div className="relative border-b border-white/20 shadow-xl">
          {/* Enhanced patient info banner */}
          {(patientName || gestationalWeek > 0) && (
            <div 
              className={`mx-4 mt-4 mb-6 rounded-2xl border-2 backdrop-blur-sm ${riskConfig.bg} shadow-lg transition-all duration-500 ${
                showBanner ? 'opacity-100 translate-y-0' : 'opacity-0 -translate-y-5'
              }`}
            >
              <div className="p-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-6">
                    {patientName && (
                      <div 
                        className="flex items-center gap-3"
                        style={{ 
                          animation: showBanner ? 'slideInLeft 0.6s ease-out 0.2s both' : 'none'
                        }}
                      >
                        <div className={`w-12 h-12 bg-gradient-to-br ${riskConfig.color} rounded-full flex items-center justify-center shadow-lg relative`} style={{ animation: 'pulse-glow 3s ease-in-out infinite' }}>
                          <User size={20} className="text-white" />
                          <div 
                            className="absolute -bottom-1 -right-1 w-4 h-4 bg-white rounded-full flex items-center justify-center shadow-md transition-transform duration-300 hover:scale-110"
                            style={{ 
                              animation: showBanner ? 'fadeInScale 0.4s ease-out 0.5s both' : 'none'
                            }}
                          >
                            {riskConfig.icon}
                          </div>
                        </div>
                        <div>
                          <div className="font-bold text-gray-900 text-lg">{patientName}</div>
                          <div className={`text-xs uppercase tracking-wider font-medium flex items-center gap-1 ${riskConfig.text}`}>
                            {riskLevel} Risk Patient
                            <div className="w-2 h-2 bg-current rounded-full animate-pulse" />
                          </div>
                        </div>
                      </div>
                    )}
                    
                    {gestationalWeek > 0 && (
                      <div 
                        className="flex items-center gap-3 bg-white/80 backdrop-blur-sm px-4 py-3 rounded-xl border border-white/60 shadow-lg hover:shadow-xl transition-all duration-300"
                        style={{ 
                          animation: showBanner ? 'fadeInUp 0.6s ease-out 0.3s both' : 'none'
                        }}
                      >
                        <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center shadow-md">
                          <Calendar size={18} className="text-white" />
                        </div>
                        <div>
                          <div className="font-bold text-gray-900 text-lg">{gestationalWeek}</div>
                          <div className="text-xs text-gray-600 font-medium">Weeks</div>
                        </div>
                      </div>
                    )}
                  </div>
                  
                  {nextAppointment && (
                    <div 
                      className="flex items-center gap-3 bg-white/80 backdrop-blur-sm px-4 py-3 rounded-xl border border-white/60 shadow-lg hover:shadow-xl transition-all duration-300"
                      style={{ 
                        animation: showBanner ? 'slideInRight 0.6s ease-out 0.4s both' : 'none'
                      }}
                    >
                      <div className="w-10 h-10 bg-gradient-to-br from-orange-500 to-red-500 rounded-full flex items-center justify-center shadow-md">
                        <Clock size={18} className="text-white" />
                      </div>
                      <div>
                        <div className="text-xs text-gray-600 uppercase tracking-wider font-medium">Next Visit</div>
                        <div className="font-bold text-gray-900">{nextAppointment}</div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

          {/* Enhanced navigation dock */}
          <div 
            className={`flex justify-center px-4 pb-6 transition-all duration-500 ${
              showDock ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-5'
            }`}
          >
            <EnhancedDock 
              items={dockItems}
              currentTab={currentTab}
              onTabChange={onTabChange}
            />
          </div>

          {/* Enhanced progress indicator */}
          <div 
            className={`pb-4 transition-all duration-500 ${
              showProgress ? 'opacity-100' : 'opacity-0'
            }`}
          >
            <div className="flex justify-center">
              <ProgressDots 
                items={dockItems}
                currentTab={currentTab}
                completionStatus={completionStatus}
              />
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

// Enhanced demo component
export default function ANCDockDemo() {
  const [currentTab, setCurrentTab] = React.useState('rapidAssessment');
  const [completionStatus, setCompletionStatus] = React.useState({
    rapidAssessment: true,
    clientProfile: true,
    examination: false,
  });

  const getTabContent = () => {
    const contents = {
      rapidAssessment: {
        title: 'Rapid Assessment',
        subtitle: 'Initial patient evaluation and vital signs',
        cards: [
          { title: 'Vital Signs', desc: 'Record blood pressure, temperature, pulse, and weight', color: 'blue', icon: <Activity size={20} />, status: 'complete' },
          { title: 'Risk Factors', desc: 'Identify high-risk conditions and complications', color: 'red', icon: <Shield size={20} />, status: 'pending' },
          { title: 'Chief Complaint', desc: 'Document primary concerns and symptoms', color: 'green', icon: <MessageSquare size={20} />, status: 'complete' },
          { title: 'Medical History', desc: 'Review past medical and obstetric history', color: 'purple', icon: <User size={20} />, status: 'review' }
        ]
      },
      clientProfile: {
        title: 'Client Profile',
        subtitle: 'Comprehensive patient information management',
        cards: [
          { title: 'Demographics', desc: 'Age, contact information, emergency contacts', color: 'rose', icon: <User size={20} />, status: 'complete' },
          { title: 'Insurance', desc: 'Coverage details and authorization status', color: 'blue', icon: <Shield size={20} />, status: 'complete' },
          { title: 'Preferences', desc: 'Language, cultural considerations, birth plan', color: 'emerald', icon: <Heart size={20} />, status: 'pending' },
          { title: 'Support System', desc: 'Partner involvement and family support', color: 'orange', icon: <Users size={20} />, status: 'review' }
        ]
      },
      examination: {
        title: 'Physical Examination',
        subtitle: 'Comprehensive maternal and fetal assessment',
        cards: [
          { title: 'General Exam', desc: 'Overall health assessment and appearance', color: 'green', icon: <Stethoscope size={20} />, status: 'pending' },
          { title: 'Abdominal Exam', desc: 'Fundal height, fetal position, movements', color: 'blue', icon: <Activity size={20} />, status: 'pending' },
          { title: 'Pelvic Exam', desc: 'Cervical assessment when indicated', color: 'purple', icon: <TestTube size={20} />, status: 'pending' },
          { title: 'Extremities', desc: 'Edema, reflexes, varicose veins', color: 'cyan', icon: <User size={20} />, status: 'pending' }
        ]
      }
    };
    
    return contents[currentTab] || contents.rapidAssessment;
  };

  const content = getTabContent();

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-purple-50 relative overflow-hidden">
      {/* Background decorations */}
      <div className="absolute top-0 left-0 w-full h-full overflow-hidden pointer-events-none">
        <div className="absolute -top-10 -right-10 w-40 h-40 bg-blue-400/10 rounded-full blur-3xl animate-pulse" />
        <div className="absolute top-1/3 -left-20 w-60 h-60 bg-purple-400/10 rounded-full blur-3xl animate-pulse" style={{ animationDelay: '1s' }} />
        <div className="absolute bottom-0 right-1/4 w-32 h-32 bg-pink-400/10 rounded-full blur-3xl animate-pulse" style={{ animationDelay: '2s' }} />
      </div>

      <ANCHeaderDock 
        currentTab={currentTab}
        onTabChange={setCurrentTab}
        patientName="Sarah Mwanza"
        gestationalWeek={28}
        nextAppointment="Sept 15, 2025"
        riskLevel="medium"
        completionStatus={completionStatus}
      />
      
      <div className="px-6 pb-12 relative z-10">
        <div className="max-w-6xl mx-auto">
          <div className="bg-white/80 backdrop-blur-sm rounded-3xl shadow-2xl border border-white/20 overflow-hidden transition-all duration-500 hover:shadow-3xl">
            {/* Enhanced header section */}
            <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-blue-700 p-8 text-white relative overflow-hidden">
              <div className="relative z-10">
                <h1 className="text-4xl font-bold mb-2 drop-shadow-lg">{content.title}</h1>
                <p className="text-blue-100 text-lg font-medium">{content.subtitle}</p>
              </div>
              
              {/* Animated background elements */}
              <div className="absolute -top-10 -right-10 w-40 h-40 bg-white/10 rounded-full blur-3xl" style={{ animation: 'float 10s ease-in-out infinite' }} />
              <div className="absolute -bottom-10 -left-10 w-60 h-60 bg-purple-500/10 rounded-full blur-3xl" style={{ animation: 'float 8s ease-in-out infinite reverse' }} />
            </div>
            
            {/* Enhanced content grid */}
            <div className="p-8">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {content.cards.map((card, index) => (
                  <div 
                    key={index}
                    className={`group relative bg-gradient-to-br from-${card.color}-50 to-${card.color}-100/50 hover:from-${card.color}-100 hover:to-${card.color}-200/50 p-6 rounded-2xl border border-${card.color}-200/60 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 cursor-pointer overflow-hidden`}
                    style={{
                      animation: `fadeInUp 0.6s ease-out ${0.1 * index}s both`
                    }}
                  >
                    <div className="flex items-start gap-4 relative z-10">
                      <div className={`w-12 h-12 bg-gradient-to-br from-${card.color}-500 to-${card.color}-600 rounded-xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300`}>
                        <div className="text-white">
                          {card.icon}
                        </div>
                      </div>
                      <div className="flex-1">
                        <h3 className={`text-${card.color}-900 font-bold text-xl mb-2 group-hover:text-${card.color}-800 transition-colors`}>
                          {card.title}
                        </h3>
                        <p className={`text-${card.color}-700 leading-relaxed text-sm`}>
                          {card.desc}
                        </p>
                      </div>
                      {card.status && (
                        <div className={`w-3 h-3 rounded-full animate-pulse ${
                          card.status === 'complete' ? 'bg-green-500' :
                          card.status === 'pending' ? 'bg-yellow-500' : 'bg-blue-500'
                        }`} />
                      )}
                    </div>
                    
                    {/* Hover effect overlay */}
                    <div className={`absolute inset-0 bg-gradient-to-br from-${card.color}-500/5 to-transparent rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300`} />
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}