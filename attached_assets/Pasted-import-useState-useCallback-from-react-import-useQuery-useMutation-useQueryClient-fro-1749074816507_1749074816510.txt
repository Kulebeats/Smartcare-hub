import { useState, useCallback } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
// Assuming UI components are available globally or via a different import mechanism
// if "@/" aliasing is the issue. For this fix, we'll rely on them being available.
// import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
// import { Button } from "@/components/ui/button";
// import { Input } from "@/components/ui/input";
// import { Label } from "@/components/ui/label";
// import { Badge } from "@/components/ui/badge";
// import { Progress } from "@/components/ui/progress";
// import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
// import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
// import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

// Removed problematic imports, will rely on mocks or globally available versions
// import { useToast } from "@/hooks/use-toast";
// import { apiRequest } from "@/lib/queryClient"; 

import {
  Upload,
  FileText,
  CheckCircle,
  AlertTriangle,
  Database,
  Zap,
  Activity,
  Download,
  RefreshCw,
  Settings,
  Shield,
  BarChart3
} from "lucide-react";

interface DAKRule {
  id: number;
  ruleCode: string;
  moduleCode: string;
  ruleName: string;
  alertSeverity: string;
  dakReference: string;
  evidenceQuality: string;
  isActive: boolean;
  guidelineVersion: string;
  createdAt: string;
}

interface ProcessingJob {
  id: string;
  status: string;
  totalRecords: number;
  processedRecords: number;
  failedRecords: number;
  createdAt: string;
  completedAt?: string;
  errorDetails?: string;
}

interface CacheStats {
  hitRate: number;
  missRate: number; 
  totalQueries: number;
  cacheSize: number; 
  lastUpdated: string;
}

// START: MOCK IMPLEMENTATIONS (Remove or replace with actual project setup)
// These are placeholder for a self-contained example if actual imports are not resolvable.
// In a real project, ensure your aliases in tsconfig.json/jsconfig.json are correct
// and the files exist at the specified paths.

const Card = ({ children, className }: { children: React.ReactNode, className?: string }) => <div className={`border rounded-lg shadow-sm ${className}`}>{children}</div>;
const CardHeader = ({ children, className }: { children: React.ReactNode, className?: string }) => <div className={`p-6 ${className}`}>{children}</div>;
const CardTitle = ({ children, className }: { children: React.ReactNode, className?: string }) => <h3 className={`text-lg font-semibold ${className}`}>{children}</h3>;
const CardDescription = ({ children, className }: { children: React.ReactNode, className?: string }) => <p className={`text-sm text-muted-foreground ${className}`}>{children}</p>;
const CardContent = ({ children, className }: { children: React.ReactNode, className?: string }) => <div className={`p-6 pt-0 ${className}`}>{children}</div>;

const Button = ({ children, onClick, disabled, variant, className }: { children: React.ReactNode, onClick?: () => void, disabled?: boolean, variant?: string, className?: string }) => (
  <button onClick={onClick} disabled={disabled} className={`px-4 py-2 rounded-md ${variant === 'outline' ? 'border border-input bg-transparent hover:bg-accent hover:text-accent-foreground' : 'bg-primary text-primary-foreground hover:bg-primary/90'} ${disabled ? 'opacity-50 cursor-not-allowed' : ''} ${className}`}>
    {children}
  </button>
);
const Input = ({ id, type, accept, onChange, disabled, className }: { id?: string, type?: string, accept?: string, onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void, disabled?: boolean, className?: string }) => (
  <input id={id} type={type} accept={accept} onChange={onChange} disabled={disabled} className={`flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`} />
);
const Label = ({ htmlFor, children, className }: { htmlFor?: string, children: React.ReactNode, className?: string }) => <label htmlFor={htmlFor} className={`text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 ${className}`}>{children}</label>;
const Badge = ({ children, variant, className }: { children: React.ReactNode, variant?: string, className?: string }) => {
  let badgeClass = "px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 rounded-full ";
  if (variant === 'destructive') badgeClass += "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80";
  else if (variant === 'secondary') badgeClass += "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80";
  else if (variant === 'outline') badgeClass += "text-foreground";
  else badgeClass += "border-transparent bg-primary text-primary-foreground hover:bg-primary/80";
  return <span className={`${badgeClass} ${className}`}>{children}</span>;
};
const Progress = ({ value, className }: { value?: number, className?: string }) => <div className={`relative h-4 w-full overflow-hidden rounded-full bg-secondary ${className}`}><div className="h-full w-full flex-1 bg-primary transition-all" style={{ transform: `translateX(-${100 - (value || 0)}%)` }} /></div>;
const Tabs = ({ children, defaultValue, className }: { children: React.ReactNode, defaultValue?: string, className?: string }) => <div className={className}>{children}</div>; // Simplified
const TabsList = ({ children, className }: { children: React.ReactNode, className?: string }) => <div className={`inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground ${className}`}>{children}</div>;
const TabsTrigger = ({ children, value, className }: { children: React.ReactNode, value?: string, className?: string }) => <button className={`inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm ${className}`}>{children}</button>;
const TabsContent = ({ children, value, className }: { children: React.ReactNode, value?: string, className?: string }) => <div className={className}>{children}</div>; // Simplified
const Table = ({ children, className }: { children: React.ReactNode, className?: string }) => <table className={`w-full caption-bottom text-sm ${className}`}>{children}</table>;
const TableHeader = ({ children, className }: { children: React.ReactNode, className?: string }) => <thead className={`[&_tr]:border-b ${className}`}>{children}</thead>;
const TableRow = ({ children, className }: { children: React.ReactNode, className?: string }) => <tr className={`border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted ${className}`}>{children}</tr>;
const TableHead = ({ children, className }: { children: React.ReactNode, className?: string }) => <th className={`h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 ${className}`}>{children}</th>;
const TableBody = ({ children, className }: { children: React.ReactNode, className?: string }) => <tbody className={`[&_tr:last-child]:border-0 ${className}`}>{children}</tbody>;
const TableCell = ({ children, className }: { children: React.ReactNode, className?: string }) => <td className={`p-4 align-middle [&:has([role=checkbox])]:pr-0 ${className}`}>{children}</td>;
const Alert = ({ children, variant, className }: { children: React.ReactNode, variant?: string, className?: string }) => {
  let alertClass = "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground ";
  if (variant === 'destructive') alertClass += "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive";
  return <div role="alert" className={`${alertClass} ${className}`}>{children}</div>;
};
const AlertTitle = ({ children, className }: { children: React.ReactNode, className?: string }) => <h5 className={`mb-1 font-medium leading-none tracking-tight ${className}`}>{children}</h5>;
const AlertDescription = ({ children, className }: { children: React.ReactNode, className?: string }) => <div className={`text-sm [&_p]:leading-relaxed ${className}`}>{children}</div>;

const mockUseToast = () => {
  return {
    toast: ({ title, description, variant }: { title: string, description?: string, variant?: string }) => {
      console.log(`Toast: ${title} - ${description} (${variant || 'default'})`);
      if (variant === 'destructive') {
        console.error(`Error Toast: ${title} - ${description}`);
      }
    }
  };
};

const mockApiRequest = async (url: string, options?: RequestInit): Promise<any> => {
  console.log(`mockApiRequest: ${options?.method || 'GET'} ${url}`, options?.body);
  // Simulate API responses for different endpoints
  if (url.includes('/api/admin/dak/rules')) {
     // Simulate some rules for better UI testing
    return Promise.resolve({ 
      rules: [
        { id: 1, ruleCode: 'ANC.R1.01', moduleCode: 'ANC', ruleName: 'High Blood Pressure Alert', alertSeverity: 'Red', dakReference: 'WHO-ANC-2022.1', evidenceQuality: 'A', isActive: true, guidelineVersion: 'v1.2', createdAt: new Date().toISOString() },
        { id: 2, ruleCode: 'ART.R2.05', moduleCode: 'ART', ruleName: 'CD4 Count Low', alertSeverity: 'Yellow', dakReference: 'WHO-ART-2023.3', evidenceQuality: 'B', isActive: true, guidelineVersion: 'v2.0', createdAt: new Date().toISOString() },
      ]
    });
  }
  if (url.includes('/api/admin/dak/jobs')) {
    // Simulate some jobs
     return Promise.resolve({ 
      jobs: [
        { id: 'job_123', status: 'completed', totalRecords: 150, processedRecords: 150, failedRecords: 0, createdAt: new Date(Date.now() - 3600000).toISOString(), completedAt: new Date().toISOString() },
        { id: 'job_456', status: 'failed', totalRecords: 200, processedRecords: 100, failedRecords: 100, errorDetails: 'CSV parsing error on line 50', createdAt: new Date().toISOString() },
      ]
    });
  }
  if (url.includes('/api/admin/dak/cache/stats')) {
    return Promise.resolve({ hitRate: 85.5, missRate: 14.5, totalQueries: 1250, cacheSize: 500, lastUpdated: new Date().toISOString() });
  }
  if (url.includes('/api/admin/dak/integrity-check')) {
    return Promise.resolve({ validRules: 98, totalRules: 100, message: "Integrity check complete" });
  }
  if (url.includes('/api/admin/dak/cache/warm') || url.includes('/api/admin/dak/cache/clear')) {
    return Promise.resolve({ message: "Operation successful" });
  }
   if (url.includes('/api/admin/dak/upload-csv-raw')) {
    // Simulate a successful upload response
    await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate network delay
    return Promise.resolve({ jobId: `job_${Date.now()}`, message: "CSV processed successfully" });
  }
  // Fallback for unmocked endpoints
  // This part would ideally not be hit if all calls are mocked or handled by actual apiRequest
  try {
    const response = await fetch(url, options);
    if (!response.ok) {
      const error = await response.json().catch(() => ({ message: `Request failed with status ${response.status}` }));
      throw new Error(error.message);
    }
    return response.json();
  } catch (error) {
    console.error("Fetch error in mockApiRequest fallback:", error);
    throw error; // Re-throw to be caught by useMutation's onError
  }
};
// END: MOCK IMPLEMENTATIONS


export default function AdminDAK() {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [uploadProgress, setUploadProgress] = useState(0); 
  
  // Attempt to use globally defined useToast and apiRequest, or fall back to mocks.
  // This assumes `useToast` and `apiRequest` might be provided by the environment
  // if not imported directly.
  const { toast } = (typeof useToast === 'function' ? useToast() : mockUseToast)();
  const actualApiRequest = typeof apiRequest === 'function' ? apiRequest : mockApiRequest;


  const queryClient = useQueryClient();

  // Fetch DAK rules
  const { data: rulesData, isLoading: rulesLoading } = useQuery({
    queryKey: ["/api/admin/dak/rules"],
    queryFn: () => actualApiRequest("/api/admin/dak/rules"),
    retry: false,
  });

  // Fetch processing jobs
  const { data: jobsData, isLoading: jobsLoading } = useQuery({
    queryKey: ["/api/admin/dak/jobs"],
    queryFn: () => actualApiRequest("/api/admin/dak/jobs"),
    retry: false,
  });

  // Fetch cache statistics
  const { data: cacheStats, isLoading: cacheLoading } = useQuery({
    queryKey: ["/api/admin/dak/cache/stats"],
    queryFn: () => actualApiRequest("/api/admin/dak/cache/stats"),
    retry: false,
  });

  // File upload mutation
  const uploadMutation = useMutation({
    mutationFn: async (file: File) => {
      const csvData = await file.text();
      setUploadProgress(20); // Initial progress after reading file
      
      // Using actualApiRequest which might be the mock or a real one.
      // The mockApiRequest for '/api/admin/dak/upload-csv-raw' simulates a POST.
      // If actualApiRequest is the real one, it should handle the fetch.
      // For this example, we'll assume actualApiRequest can handle this structure,
      // or we directly use fetch if actualApiRequest is just a GET helper.
      
      // Let's stick to fetch for clarity on the upload part, as it was in the original user code.
      const response = await fetch('/api/admin/dak/upload-csv-raw', {
        method: 'POST',
        headers: {
          'Content-Type': 'text/csv', 
          'X-File-Name': file.name,    
        },
        body: csvData, 
        credentials: 'include', 
      });
      setUploadProgress(70); // Progress after sending request

      if (!response.ok) {
        let errorMessage = `Upload failed with status: ${response.status}`;
        try {
          const errorData = await response.json();
          errorMessage = errorData.message || errorData.error || JSON.stringify(errorData);
        } catch (e) {
          const textError = await response.text();
          if (textError) {
            errorMessage = textError;
          }
          console.error("Server error response (not JSON or no message field):", textError);
        }
        throw new Error(errorMessage);
      }
      
      setUploadProgress(100); // Progress on successful response
      return await response.json(); 
    },
    onSuccess: (data: any) => { 
      toast({
        title: "Upload Successful",
        description: `CSV uploaded successfully. Job ID: ${data.jobId || 'N/A'}`,
      });
      setSelectedFile(null);
      setUploadProgress(0); 
      queryClient.invalidateQueries({ queryKey: ["/api/admin/dak/jobs"] });
    },
    onError: (error: any) => {
      toast({
        title: "Upload Failed",
        description: error.message || "An unknown error occurred during upload.",
        variant: "destructive",
      });
      setUploadProgress(0); 
    },
  });

  // Integrity check mutation
  const integrityMutation = useMutation({
    mutationFn: async () => {
      return actualApiRequest('/api/admin/dak/integrity-check', { method: 'POST' }); 
    },
    onSuccess: (data: any) => { 
      toast({
        title: "Integrity Check Complete",
        description: `${data.validRules || 0}/${data.totalRules || 0} rules passed validation. ${data.message || ''}`,
      });
    },
    onError: (error: any) => {
      toast({
        title: "Integrity Check Failed",
        description: error.message || "Failed to perform integrity check.",
        variant: "destructive",
      });
    },
  });

  // Cache management mutations
  const warmCacheMutation = useMutation({
    mutationFn: async () => {
      return actualApiRequest('/api/admin/dak/cache/warm', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'}, 
        body: JSON.stringify({ modules: ['ANC', 'ART', 'PHARMACOVIGILANCE'] }), 
      });
    },
    onSuccess: (data: any) => {
      toast({
        title: "Cache Warmed",
        description: data.message || "Decision support cache has been preloaded.",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/dak/cache/stats"] });
    },
    onError: (error: any) => {
      toast({
        title: "Cache Warm Failed",
        description: error.message || "Failed to warm cache.",
        variant: "destructive",
      });
    }
  });

  const clearCacheMutation = useMutation({
    mutationFn: async () => {
      return actualApiRequest('/api/admin/dak/cache/clear', {
        method: 'POST',
      });
    },
    onSuccess: (data: any) => {
      toast({
        title: "Cache Cleared",
        description: data.message || "Decision support cache has been cleared.",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/dak/cache/stats"] });
    },
    onError: (error: any) => {
      toast({
        title: "Cache Clear Failed",
        description: error.message || "Failed to clear cache.",
        variant: "destructive",
      });
    }
  });

  const handleFileSelect = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      if (file.type !== 'text/csv' && !file.name.endsWith('.csv')) {
        toast({
          title: "Invalid File Type",
          description: "Please select a CSV file (.csv).",
          variant: "destructive",
        });
        if (event.target) {
            event.target.value = ""; 
        }
        setSelectedFile(null);
        return;
      }
      setSelectedFile(file);
    } else {
      setSelectedFile(null);
    }
  }, [toast]); // Added toast to dependency array

  const handleUpload = useCallback(() => {
    if (!selectedFile) {
        toast({
            title: "No File Selected",
            description: "Please select a CSV file to upload.",
            variant: "destructive", // Changed to destructive for consistency
        });
        return;
    }
    setUploadProgress(5); 
    uploadMutation.mutate(selectedFile);
  }, [selectedFile, uploadMutation, toast]); // Added toast to dependency array

  const getSeverityColor = (severity?: string): 'destructive' | 'secondary' | 'default' | 'outline' => {
    switch (severity?.toLowerCase()) {
      case 'red': return 'destructive';
      case 'yellow': return 'secondary';
      case 'green': return 'default';
      default: return 'outline';
    }
  };

  const getEvidenceColor = (quality?: string): 'destructive' | 'secondary' | 'default' | 'outline' => {
    switch (quality?.toUpperCase()) {
      case 'A': return 'default'; 
      case 'B': return 'secondary';
      case 'C': return 'outline';
      case 'D': return 'destructive'; 
      default: return 'outline';
    }
  };
  
  const rules = rulesData?.rules || [];
  const jobs = jobsData?.jobs || [];

  return (
    <div className="container mx-auto p-4 sm:p-6 space-y-6 font-sans">
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
        <div>
          <h1 className="text-2xl sm:text-3xl font-bold tracking-tight">DAK Clinical Decision Support</h1>
          <p className="text-sm sm:text-base text-muted-foreground">
            Manage clinical decision rules with full governance and traceability.
          </p>
        </div>
        <div className="flex items-center space-x-2">
          <Badge variant="outline" className="flex items-center space-x-1 py-1 px-2">
            <Shield className="h-3 w-3" />
            <span className="text-xs">DAK-Traceable</span>
          </Badge>
        </div>
      </div>

      <Tabs defaultValue="upload" className="space-y-6">
        <TabsList className="grid w-full grid-cols-2 sm:grid-cols-3 md:grid-cols-5">
          <TabsTrigger value="upload">Upload Rules</TabsTrigger>
          <TabsTrigger value="rules">Manage Rules</TabsTrigger>
          <TabsTrigger value="jobs">Processing Jobs</TabsTrigger>
          <TabsTrigger value="cache">Cache</TabsTrigger>
          <TabsTrigger value="integrity">System Health</TabsTrigger>
        </TabsList>

        <TabsContent value="upload" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2 text-xl">
                <Upload className="h-5 w-5" />
                <span>Upload Clinical Decision Rules</span>
              </CardTitle>
              <CardDescription>
                Upload CSV files containing WHO guideline-compliant clinical decision rules.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid w-full max-w-md items-center gap-1.5">
                <Label htmlFor="csvFile" className="font-medium">CSV File</Label>
                <Input
                  id="csvFile"
                  type="file"
                  accept=".csv,text/csv" 
                  onChange={handleFileSelect}
                  disabled={uploadMutation.isPending}
                  className="rounded-md" // Removed some focus styles for brevity with mocks
                />
              </div>

              {selectedFile && (
                <Alert variant="default" className="rounded-md"> 
                  <FileText className="h-4 w-4" />
                  <AlertTitle className="font-semibold">File Selected</AlertTitle>
                  <AlertDescription>
                    {selectedFile.name} ({(selectedFile.size / 1024).toFixed(1)} KB)
                  </AlertDescription>
                </Alert>
              )}

              {uploadMutation.isPending && (
                <div className="space-y-2">
                  <Progress value={uploadProgress} className="w-full h-2 rounded-full" /> 
                  <p className="text-sm text-muted-foreground animate-pulse">Processing upload, please wait...</p>
                </div>
              )}

              <div className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
                <Button
                  onClick={handleUpload}
                  disabled={!selectedFile || uploadMutation.isPending}
                  className="flex items-center justify-center space-x-2 w-full sm:w-auto rounded-md px-4 py-2"
                >
                  <Upload className="h-4 w-4" />
                  <span>{uploadMutation.isPending ? 'Uploading...' : 'Upload & Process'}</span>
                </Button>
                
                <Button
                  variant="outline"
                  onClick={() => {
                    const element = document.createElement('a');
                    element.href = '/sample-dak-template.csv'; 
                    element.download = 'dak-template.csv';
                    document.body.appendChild(element); 
                    element.click();
                    document.body.removeChild(element); 
                  }}
                  className="flex items-center justify-center space-x-2 w-full sm:w-auto rounded-md px-4 py-2"
                >
                  <Download className="h-4 w-4" />
                  <span>Download Template</span>
                </Button>
              </div>

              <Alert variant="destructive" className="rounded-md"> 
                <AlertTriangle className="h-4 w-4" />
                <AlertTitle className="font-semibold">CSV Format Requirements</AlertTitle>
                <AlertDescription className="text-xs"> 
                  Ensure headers include: <code className="bg-muted px-1 rounded-sm">rule_identifier</code>, <code className="bg-muted px-1 rounded-sm">dak_source_id</code>, etc.
                </AlertDescription>
              </Alert>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="rules" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2 text-xl">
                <Database className="h-5 w-5" />
                <span>Clinical Decision Rules ({rules.length})</span>
              </CardTitle>
              <CardDescription>
                Manage and monitor active clinical decision support rules.
              </CardDescription>
            </CardHeader>
            <CardContent>
              {rulesLoading ? (
                <div className="flex items-center justify-center p-8">
                  <RefreshCw className="h-8 w-8 animate-spin text-primary" /> 
                  <span className="ml-2 text-muted-foreground">Loading rules...</span>
                </div>
              ) : rules && rules.length > 0 ? (
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Rule Code</TableHead>
                        <TableHead>Module</TableHead>
                        <TableHead className="min-w-[200px]">Rule Name</TableHead> 
                        <TableHead>Severity</TableHead>
                        <TableHead>Evidence</TableHead>
                        <TableHead>DAK Ref.</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead>Created</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {rules.map((rule: DAKRule) => (
                        <TableRow key={rule.id} className="hover:bg-muted/50">
                          <TableCell className="font-mono text-xs">{rule.ruleCode}</TableCell>
                          <TableCell>
                            <Badge variant="secondary" className="text-xs">{rule.moduleCode}</Badge>
                          </TableCell>
                          <TableCell className="max-w-xs truncate text-sm" title={rule.ruleName}>{rule.ruleName}</TableCell>
                          <TableCell>
                            <Badge variant={getSeverityColor(rule.alertSeverity)} className="capitalize text-xs">
                              {rule.alertSeverity || 'N/A'}
                            </Badge>
                          </TableCell>
                          <TableCell>
                            <Badge variant={getEvidenceColor(rule.evidenceQuality)} className="text-xs">
                              Grade {rule.evidenceQuality || 'N/A'}
                            </Badge>
                          </TableCell>
                          <TableCell className="font-mono text-xs">{rule.dakReference}</TableCell>
                          <TableCell>
                            {rule.isActive ? (
                              <Badge variant="default" className="flex items-center space-x-1 text-xs bg-green-500 text-white">
                                <CheckCircle className="h-3 w-3" />
                                <span>Active</span>
                              </Badge>
                            ) : (
                              <Badge variant="secondary" className="text-xs">Inactive</Badge>
                            )}
                          </TableCell>
                           <TableCell className="text-xs text-muted-foreground">
                            {new Date(rule.createdAt).toLocaleDateString()}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              ) : (
                <div className="text-center p-8 text-muted-foreground">
                  <FileText className="h-10 w-10 mx-auto mb-2 text-gray-400" />
                  No clinical decision rules found. Upload a CSV file to get started.
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="jobs" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2 text-xl">
                <Activity className="h-5 w-5" />
                <span>Processing Jobs ({jobs.length})</span>
              </CardTitle>
              <CardDescription>
                Monitor CSV upload and processing job status.
              </CardDescription>
            </CardHeader>
            <CardContent>
              {jobsLoading ? (
                 <div className="flex items-center justify-center p-8">
                  <RefreshCw className="h-8 w-8 animate-spin text-primary" />
                  <span className="ml-2 text-muted-foreground">Loading jobs...</span>
                </div>
              ) : jobs && jobs.length > 0 ? (
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead className="min-w-[150px]">Job ID</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead>Progress</TableHead>
                        <TableHead>Total</TableHead>
                        <TableHead>Failed</TableHead>
                        <TableHead>Created At</TableHead>
                        <TableHead>Completed At</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {jobs.map((job: ProcessingJob) => (
                        <TableRow key={job.id} className="hover:bg-muted/50">
                          <TableCell className="font-mono text-xs">{job.id}</TableCell>
                          <TableCell>
                            <Badge
                              variant={
                                job.status === 'completed' ? 'default' :
                                job.status === 'failed' ? 'destructive' :
                                job.status === 'processing' ? 'secondary' : 
                                'outline'
                              }
                              className="capitalize text-xs"
                            >
                              {job.status}
                            </Badge>
                          </TableCell>
                          <TableCell>
                            <div className="flex items-center space-x-2">
                              <Progress
                                value={job.totalRecords > 0 ? (job.processedRecords / job.totalRecords) * 100 : 0}
                                className="w-20 h-1.5 rounded-full"
                              />
                              <span className="text-xs text-muted-foreground">
                                {job.processedRecords}/{job.totalRecords}
                              </span>
                            </div>
                          </TableCell>
                          <TableCell className="text-sm">{job.totalRecords}</TableCell>
                          <TableCell>
                            {job.failedRecords > 0 ? (
                              <span className="text-destructive font-semibold text-sm">{job.failedRecords}</span>
                            ) : (
                              <span className="text-sm">{job.failedRecords}</span>
                            )}
                          </TableCell>
                          <TableCell className="text-xs text-muted-foreground">
                            {new Date(job.createdAt).toLocaleString()}
                          </TableCell>
                          <TableCell className="text-xs text-muted-foreground">
                            {job.completedAt ? new Date(job.completedAt).toLocaleString() : 'N/A'}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              ) : (
                <div className="text-center p-8 text-muted-foreground">
                  <Activity className="h-10 w-10 mx-auto mb-2 text-gray-400" />
                  No processing jobs found.
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="cache" className="space-y-6">
          <div className="grid gap-6 md:grid-cols-2">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2 text-xl">
                  <Zap className="h-5 w-5" />
                  <span>Cache Performance</span>
                </CardTitle>
                 <CardDescription>
                    Overview of the decision support cache statistics.
                </CardDescription>
              </CardHeader>
              <CardContent>
                {cacheLoading ? (
                   <div className="flex items-center justify-center p-8">
                    <RefreshCw className="h-8 w-8 animate-spin text-primary" />
                     <span className="ml-2 text-muted-foreground">Loading stats...</span>
                  </div>
                ) : cacheStats ? (
                  <div className="space-y-3">
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-muted-foreground">Hit Rate</span>
                      <span className="font-semibold text-lg text-green-600">{cacheStats.hitRate?.toFixed(1) ?? '0.0'}%</span>
                    </div>
                     <Progress value={cacheStats.hitRate ?? 0} className="h-1.5" />
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-muted-foreground">Total Queries</span>
                      <span className="font-semibold">{cacheStats.totalQueries ?? 0}</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-muted-foreground">Cache Entries</span>
                      <span className="font-semibold">{cacheStats.cacheSize ?? 0}</span>
                    </div>
                    <div className="flex justify-between text-xs text-muted-foreground pt-2 border-t mt-2">
                      <span>Last Updated</span>
                      <span>{cacheStats.lastUpdated ? new Date(cacheStats.lastUpdated).toLocaleString() : 'N/A'}</span>
                    </div>
                  </div>
                ) : (
                  <div className="text-center p-4 text-muted-foreground">
                     <Zap className="h-10 w-10 mx-auto mb-2 text-gray-400" />
                    Cache statistics unavailable.
                  </div>
                )}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2 text-xl">
                  <Settings className="h-5 w-5" />
                  <span>Cache Management</span>
                </CardTitle>
                 <CardDescription>
                    Perform operations like warming or clearing the cache.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                <Button
                  onClick={() => warmCacheMutation.mutate()}
                  disabled={warmCacheMutation.isPending || cacheLoading}
                  className="w-full flex items-center justify-center space-x-2 rounded-md py-2"
                >
                  {warmCacheMutation.isPending ? <RefreshCw className="h-4 w-4 animate-spin" /> : <Zap className="h-4 w-4" />}
                  <span>{warmCacheMutation.isPending ? 'Warming Cache...' : 'Warm Cache'}</span>
                </Button>
                
                <Button
                  variant="outline"
                  onClick={() => clearCacheMutation.mutate()}
                  disabled={clearCacheMutation.isPending || cacheLoading}
                  className="w-full flex items-center justify-center space-x-2 rounded-md py-2"
                >
                  {clearCacheMutation.isPending ? <RefreshCw className="h-4 w-4 animate-spin" /> : <RefreshCw className="h-4 w-4" />}
                  <span>{clearCacheMutation.isPending ? 'Clearing Cache...' : 'Clear Cache'}</span>
                </Button>

                <p className="text-xs text-muted-foreground pt-2">
                  Warm the cache to preload frequently accessed decision rules for better performance, or clear it to remove all stored cache data.
                </p>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="integrity" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2 text-xl">
                <BarChart3 className="h-5 w-5" /> 
                <span>System Health & Integrity</span>
              </CardTitle>
              <CardDescription>
                Monitor system health and run data integrity checks on clinical rules.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <Button
                onClick={() => integrityMutation.mutate()}
                disabled={integrityMutation.isPending}
                className="flex items-center space-x-2 rounded-md px-4 py-2"
              >
                {integrityMutation.isPending ? <RefreshCw className="h-4 w-4 animate-spin" /> : <CheckCircle className="h-4 w-4" />}
                <span>{integrityMutation.isPending ? 'Running Check...' : 'Run Integrity Check'}</span>
              </Button>

              {integrityMutation.isSuccess && integrityMutation.data && (
                 <Alert variant="default" className="rounded-md">
                    <CheckCircle className="h-4 w-4 text-green-500" />
                    <AlertTitle className="font-semibold">Integrity Check Complete</AlertTitle>
                    <AlertDescription>
                        {integrityMutation.data.validRules} out of {integrityMutation.data.totalRules} rules passed validation.
                         {integrityMutation.data.message && ` (${integrityMutation.data.message})`}
                    </AlertDescription>
                </Alert>
              )}
               {integrityMutation.isError && (
                 <Alert variant="destructive" className="rounded-md">
                    <AlertTriangle className="h-4 w-4" />
                    <AlertTitle className="font-semibold">Integrity Check Failed</AlertTitle>
                    <AlertDescription>
                        {/* @ts-ignore */}
                        {integrityMutation.error?.message || "An unexpected error occurred."}
                    </AlertDescription>
                </Alert>
              )}


              <Alert variant="info" className="rounded-md bg-blue-50 border-blue-300 text-blue-700"> 
                <Shield className="h-4 w-4 text-blue-600" /> 
                <AlertTitle className="font-semibold text-blue-800">DAK Compliance Features</AlertTitle>
                <AlertDescription className="space-y-1 text-xs">
                  <p>• Full DAK reference tracking for governance.</p>
                  <p>• Evidence quality grading (e.g., A-D rating system).</p>
                  <p>• WHO guideline version control and traceability.</p>
                  <p>• Automated compliance monitoring capabilities.</p>
                  <p>• Complete audit trail for all rule modifications.</p>
                </AlertDescription>
              </Alert>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}