"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Textarea } from "@/components/ui/textarea"
import { Separator } from "@/components/ui/separator"
import { X, Calculator } from "lucide-react"

interface VitalsData {
  // Blood Pressure
  systolic_blood_pressure: string
  diastolic_blood_pressure: string
  sbp_after_10_to_15_minutes: string
  dbp_after_10_to_15_minutes: string
  any_symptoms_of_pre_elampsia: string[]
  urine_dipstick: string
  unable_to_record_bp: boolean
  unable_to_record_bp_reasons: string[]
  unable_to_record_bp_other: string

  // Height & Weight
  height: string
  weight: string

  // Vitals
  temperature: string
  second_temperature: string
  pulse_rate: string
  second_pulse_rate: string
  unrecordable_below_pulse_rate: string[]
  respiratory_rate: string
  second_respiratory_rate: string

  // Additional fields from form
  date: string
  time: string
  oxygen_saturation: string
  muac: string
  muac_score: string
  abdominal_circumference: string
  head_circumference: string
  hc_score: string
  note: string
}

export default function MedicalVitalsForm() {
  const [formData, setFormData] = useState<VitalsData>({
    systolic_blood_pressure: "",
    diastolic_blood_pressure: "",
    sbp_after_10_to_15_minutes: "",
    dbp_after_10_to_15_minutes: "",
    any_symptoms_of_pre_elampsia: [],
    urine_dipstick: "",
    unable_to_record_bp: false,
    unable_to_record_bp_reasons: [],
    unable_to_record_bp_other: "",
    height: "",
    weight: "",
    temperature: "",
    second_temperature: "",
    pulse_rate: "",
    second_pulse_rate: "",
    unrecordable_below_pulse_rate: [],
    respiratory_rate: "",
    second_respiratory_rate: "",
    date: new Date().toISOString().split("T")[0],
    time: new Date().toLocaleTimeString("en-US", { hour12: true, hour: "2-digit", minute: "2-digit" }),
    oxygen_saturation: "",
    muac: "",
    muac_score: "",
    abdominal_circumference: "",
    head_circumference: "",
    hc_score: "",
    note: "",
  })

  const [bmi, setBmi] = useState<string>("")
  const [showModal, setShowModal] = useState(true)

  // Calculate BMI when height or weight changes
  useEffect(() => {
    if (formData.height && formData.weight) {
      const heightInMeters = Number.parseFloat(formData.height) / 100
      const weightInKg = Number.parseFloat(formData.weight)
      if (heightInMeters > 0 && weightInKg > 0) {
        const bmiValue = weightInKg / (heightInMeters * heightInMeters)
        setBmi(bmiValue.toFixed(1))
      }
    } else {
      setBmi("")
    }
  }, [formData.height, formData.weight])

  // Enhanced BP Business Rules
  const getBPCategory = (systolic: number, diastolic: number) => {
    if (systolic >= 180 || diastolic >= 120) {
      return { category: "hypertensive_crisis", severity: "critical", color: "red" }
    } else if (systolic >= 140 || diastolic >= 90) {
      return { category: "stage_2_hypertension", severity: "high", color: "red" }
    } else if (systolic >= 130 || diastolic >= 80) {
      return { category: "stage_1_hypertension", severity: "moderate", color: "orange" }
    } else if (systolic >= 120 && diastolic < 80) {
      return { category: "elevated", severity: "mild", color: "yellow" }
    } else if (systolic < 90 || diastolic < 60) {
      return { category: "hypotension", severity: "low", color: "blue" }
    } else {
      return { category: "normal", severity: "normal", color: "green" }
    }
  }

  // Enhanced BMI Business Rules
  const getBMICategory = (bmi: number) => {
    if (bmi < 16) {
      return { category: "severely_underweight", severity: "critical", color: "red", risk: "high" }
    } else if (bmi < 18.5) {
      return { category: "underweight", severity: "moderate", color: "orange", risk: "moderate" }
    } else if (bmi < 25) {
      return { category: "normal", severity: "normal", color: "green", risk: "low" }
    } else if (bmi < 30) {
      return { category: "overweight", severity: "mild", color: "yellow", risk: "moderate" }
    } else if (bmi < 35) {
      return { category: "obesity_class_1", severity: "moderate", color: "orange", risk: "high" }
    } else if (bmi < 40) {
      return { category: "obesity_class_2", severity: "high", color: "red", risk: "high" }
    } else {
      return { category: "obesity_class_3", severity: "critical", color: "red", risk: "very_high" }
    }
  }

  // Get BMI status message and recommendations
  const getBMIStatusMessage = (bmi: number) => {
    const category = getBMICategory(bmi)
    const messages = {
      severely_underweight: {
        status: "CRITICAL: Severely Underweight",
        description: "BMI below 16 - Immediate nutritional assessment required",
        recommendations: ["Immediate medical evaluation", "Nutritional counseling", "Monitor for eating disorders"],
        pregnancyNote: "High risk for pregnancy complications - specialized care needed",
      },
      underweight: {
        status: "MODERATE: Underweight",
        description: "BMI 16-18.4 - Below healthy weight range",
        recommendations: ["Nutritional assessment", "Weight gain plan", "Monitor nutritional status"],
        pregnancyNote: "May need additional weight gain monitoring during pregnancy",
      },
      normal: {
        status: "Normal Weight",
        description: "BMI 18.5-24.9 - Healthy weight range",
        recommendations: ["Maintain current weight", "Continue healthy lifestyle"],
        pregnancyNote: "Optimal BMI range for pregnancy",
      },
      overweight: {
        status: "MILD: Overweight",
        description: "BMI 25-29.9 - Above healthy weight range",
        recommendations: ["Weight management counseling", "Lifestyle modifications", "Regular monitoring"],
        pregnancyNote: "Monitor for gestational diabetes and hypertension",
      },
      obesity_class_1: {
        status: "MODERATE: Obesity Class I",
        description: "BMI 30-34.9 - Moderate obesity",
        recommendations: [
          "Weight management program",
          "Dietary counseling",
          "Exercise plan",
          "Regular health monitoring",
        ],
        pregnancyNote: "Increased risk of pregnancy complications - enhanced monitoring required",
      },
      obesity_class_2: {
        status: "HIGH: Obesity Class II",
        description: "BMI 35-39.9 - Severe obesity",
        recommendations: [
          "Intensive weight management",
          "Medical evaluation",
          "Consider bariatric consultation",
          "Comorbidity screening",
        ],
        pregnancyNote: "High risk pregnancy - specialist care recommended",
      },
      obesity_class_3: {
        status: "CRITICAL: Obesity Class III",
        description: "BMI ≥40 - Extreme obesity",
        recommendations: [
          "Immediate medical evaluation",
          "Bariatric surgery consultation",
          "Intensive lifestyle intervention",
          "Comprehensive health assessment",
        ],
        pregnancyNote: "Very high risk pregnancy - multidisciplinary care team required",
      },
    }
    return { ...messages[category.category], category }
  }

  // Check if BMI requires additional monitoring
  const requiresBMIMonitoring = (bmi: number) => {
    const category = getBMICategory(bmi)
    return category.risk !== "low"
  }

  // Check if initial BP requires follow-up measurement
  const requiresFollowUpBP = () => {
    const sbp = Number.parseInt(formData.systolic_blood_pressure)
    const dbp = Number.parseInt(formData.diastolic_blood_pressure)
    if (sbp > 0 && dbp > 0) {
      const category = getBPCategory(sbp, dbp)
      return category.severity !== "normal"
    }
    return false
  }

  // Check if BP values are abnormal (for pre-eclampsia screening)
  const isBPAbnormal = () => {
    const sbp = Number.parseInt(formData.sbp_after_10_to_15_minutes)
    const dbp = Number.parseInt(formData.dbp_after_10_to_15_minutes)
    if (sbp > 0 && dbp > 0) {
      // Pre-eclampsia threshold: ≥140/90 mmHg
      return sbp >= 140 || dbp >= 90
    }
    return false
  }

  // Check if second BP reading is significantly different from first
  const hasSignificantBPChange = () => {
    const initialSbp = Number.parseInt(formData.systolic_blood_pressure)
    const initialDbp = Number.parseInt(formData.diastolic_blood_pressure)
    const followUpSbp = Number.parseInt(formData.sbp_after_10_to_15_minutes)
    const followUpDbp = Number.parseInt(formData.dbp_after_10_to_15_minutes)

    if (initialSbp > 0 && initialDbp > 0 && followUpSbp > 0 && followUpDbp > 0) {
      const sbpDiff = Math.abs(initialSbp - followUpSbp)
      const dbpDiff = Math.abs(initialDbp - followUpDbp)
      // Significant change: >10 mmHg difference
      return sbpDiff > 10 || dbpDiff > 10
    }
    return false
  }

  // Get BP status message
  const getBPStatusMessage = (systolic: number, diastolic: number) => {
    const category = getBPCategory(systolic, diastolic)
    const messages = {
      hypertensive_crisis: "CRITICAL: Hypertensive Crisis - Immediate medical attention required",
      stage_2_hypertension: "HIGH: Stage 2 Hypertension - Follow-up measurement recommended",
      stage_1_hypertension: "MODERATE: Stage 1 Hypertension - Monitor closely",
      elevated: "MILD: Elevated Blood Pressure - Lifestyle modifications recommended",
      hypotension: "LOW: Hypotension - Monitor for symptoms",
      normal: "Normal Blood Pressure",
    }
    return { message: messages[category.category], color: category.color }
  }

  // Check if temperature is abnormal
  const isTemperatureAbnormal = () => {
    const temp = Number.parseFloat(formData.temperature)
    return temp < 36.1 || temp > 37.2
  }

  // Check if pulse rate is abnormal
  const isPulseRateAbnormal = () => {
    const pulse = Number.parseInt(formData.pulse_rate)
    return pulse < 60 || pulse > 100
  }

  // Check if second pulse rate is abnormal
  const isSecondPulseRateAbnormal = () => {
    const pulse = Number.parseInt(formData.second_pulse_rate)
    return pulse < 60 || pulse > 100
  }

  // Check if respiratory rate is abnormal
  const isRespiratoryRateAbnormal = () => {
    const rate = Number.parseInt(formData.respiratory_rate)
    return rate < 12 || rate > 20
  }

  const handleInputChange = (field: keyof VitalsData, value: string | boolean | string[]) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }))
  }

  const handleMultiSelectChange = (field: keyof VitalsData, value: string, checked: boolean) => {
    setFormData((prev) => {
      const currentArray = prev[field] as string[]
      if (checked) {
        return {
          ...prev,
          [field]: [...currentArray, value],
        }
      } else {
        return {
          ...prev,
          [field]: currentArray.filter((item) => item !== value),
        }
      }
    })
  }

  const handleSave = () => {
    console.log("Form data saved:", formData)
    alert("Patient information saved successfully!")
  }

  const handleClose = () => {
    setShowModal(false)
  }

  if (!showModal) {
    return (
      <div className="p-8 text-center">
        <p className="text-gray-600">Form closed. Click below to reopen.</p>
        <Button onClick={() => setShowModal(true)} className="mt-4">
          Reopen Patient Information Form
        </Button>
      </div>
    )
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <Card className="w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-4">
          <CardTitle className="text-xl font-semibold">Patient Information</CardTitle>
          <Button variant="ghost" size="sm" onClick={handleClose}>
            <X className="h-4 w-4" />
          </Button>
        </CardHeader>

        <CardContent className="space-y-6">
          {/* Date and Time */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="date">Date *</Label>
              <Input
                id="date"
                type="date"
                value={formData.date}
                onChange={(e) => handleInputChange("date", e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="time">Time *</Label>
              <Input
                id="time"
                type="time"
                value={formData.time}
                onChange={(e) => handleInputChange("time", e.target.value)}
                required
              />
            </div>
          </div>

          {/* Height & Weight Section */}
          <div>
            <h3 className="text-lg font-medium mb-4">Height & Weight</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="space-y-2">
                <Label htmlFor="weight">Weight (kg) *</Label>
                <Input
                  id="weight"
                  type="number"
                  step="0.1"
                  placeholder="Enter Weight (kg)"
                  value={formData.weight}
                  onChange={(e) => handleInputChange("weight", e.target.value)}
                  required
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="height">Height (cm) *</Label>
                <Input
                  id="height"
                  type="number"
                  step="0.1"
                  placeholder="Enter Height (cm)"
                  value={formData.height}
                  onChange={(e) => handleInputChange("height", e.target.value)}
                  required
                />
              </div>
              <div className="space-y-2">
                <Label>BMI</Label>
                <div className="flex items-center space-x-2">
                  <Input
                    value={bmi}
                    readOnly
                    placeholder="Auto-calculated"
                    className={
                      bmi && getBMICategory(Number.parseFloat(bmi)).severity === "critical"
                        ? "border-red-500 bg-red-50"
                        : bmi && getBMICategory(Number.parseFloat(bmi)).severity === "high"
                          ? "border-orange-500 bg-orange-50"
                          : ""
                    }
                  />
                  <Calculator className="h-4 w-4 text-gray-400" />
                </div>
              </div>
            </div>

            {/* BMI Status Indicator */}
            {bmi && (
              <div className="mt-4">
                <div
                  className={`p-4 rounded-lg border ${
                    getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "red"
                      ? "bg-red-50 border-red-200"
                      : getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "orange"
                        ? "bg-orange-50 border-orange-200"
                        : getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "yellow"
                          ? "bg-yellow-50 border-yellow-200"
                          : "bg-green-50 border-green-200"
                  }`}
                >
                  <div className="flex items-start space-x-3">
                    <div
                      className={`w-3 h-3 rounded-full mt-1 ${
                        getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "red"
                          ? "bg-red-500"
                          : getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "orange"
                            ? "bg-orange-500"
                            : getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "yellow"
                              ? "bg-yellow-500"
                              : "bg-green-500"
                      }`}
                    ></div>
                    <div className="flex-1">
                      <div className="flex items-center justify-between mb-2">
                        <h4
                          className={`font-medium ${
                            getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "red"
                              ? "text-red-900"
                              : getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "orange"
                                ? "text-orange-900"
                                : getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "yellow"
                                  ? "text-yellow-900"
                                  : "text-green-900"
                          }`}
                        >
                          {getBMIStatusMessage(Number.parseFloat(bmi)).status}
                        </h4>
                        <span
                          className={`text-sm font-medium px-2 py-1 rounded ${
                            getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "red"
                              ? "bg-red-100 text-red-800"
                              : getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "orange"
                                ? "bg-orange-100 text-orange-800"
                                : getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "yellow"
                                  ? "bg-yellow-100 text-yellow-800"
                                  : "bg-green-100 text-green-800"
                          }`}
                        >
                          BMI: {bmi}
                        </span>
                      </div>

                      <p
                        className={`text-sm mb-3 ${
                          getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "red"
                            ? "text-red-700"
                            : getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "orange"
                              ? "text-orange-700"
                              : getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "yellow"
                                ? "text-yellow-700"
                                : "text-green-700"
                        }`}
                      >
                        {getBMIStatusMessage(Number.parseFloat(bmi)).description}
                      </p>

                      {/* Pregnancy-specific note */}
                      <div
                        className={`p-3 rounded-md mb-3 ${
                          getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "red"
                            ? "bg-red-100 border border-red-200"
                            : getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "orange"
                              ? "bg-orange-100 border border-orange-200"
                              : getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "yellow"
                                ? "bg-yellow-100 border border-yellow-200"
                                : "bg-green-100 border border-green-200"
                        }`}
                      >
                        <p
                          className={`text-sm font-medium ${
                            getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "red"
                              ? "text-red-800"
                              : getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "orange"
                                ? "text-orange-800"
                                : getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "yellow"
                                  ? "text-yellow-800"
                                  : "text-green-800"
                          }`}
                        >
                          🤰 Pregnancy Consideration:
                        </p>
                        <p
                          className={`text-sm mt-1 ${
                            getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "red"
                              ? "text-red-700"
                              : getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "orange"
                                ? "text-orange-700"
                                : getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "yellow"
                                  ? "text-yellow-700"
                                  : "text-green-700"
                          }`}
                        >
                          {getBMIStatusMessage(Number.parseFloat(bmi)).pregnancyNote}
                        </p>
                      </div>

                      {/* Recommendations */}
                      <div>
                        <p
                          className={`text-sm font-medium mb-2 ${
                            getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "red"
                              ? "text-red-800"
                              : getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "orange"
                                ? "text-orange-800"
                                : getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "yellow"
                                  ? "text-yellow-800"
                                  : "text-green-800"
                          }`}
                        >
                          Recommendations:
                        </p>
                        <ul
                          className={`text-sm space-y-1 ${
                            getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "red"
                              ? "text-red-700"
                              : getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "orange"
                                ? "text-orange-700"
                                : getBMIStatusMessage(Number.parseFloat(bmi)).category.color === "yellow"
                                  ? "text-yellow-700"
                                  : "text-green-700"
                          }`}
                        >
                          {getBMIStatusMessage(Number.parseFloat(bmi)).recommendations.map((rec, index) => (
                            <li key={index} className="flex items-start space-x-2">
                              <span className="text-xs mt-1">•</span>
                              <span>{rec}</span>
                            </li>
                          ))}
                        </ul>
                      </div>

                      {/* Critical BMI Alert */}
                      {getBMIStatusMessage(Number.parseFloat(bmi)).category.severity === "critical" && (
                        <div className="mt-3 p-3 bg-red-100 border border-red-300 rounded-lg">
                          <p className="font-bold text-red-900 flex items-center">⚠️ CRITICAL BMI ALERT</p>
                          <p className="text-sm text-red-800 mt-1">
                            This BMI level requires immediate medical attention and specialized care planning.
                          </p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>

          <Separator />

          {/* Blood Pressure Section */}
          <div>
            <h3 className="text-lg font-medium mb-4">Blood Pressure</h3>

            {/* Unable to record BP checkbox */}
            <div className="flex items-center space-x-2 mb-4">
              <Checkbox
                id="unable_to_record_bp"
                checked={formData.unable_to_record_bp}
                onCheckedChange={(checked) => handleInputChange("unable_to_record_bp", checked as boolean)}
              />
              <Label htmlFor="unable_to_record_bp">Unable to record BP (Blood pressure cannot be taken)</Label>
            </div>

            {formData.unable_to_record_bp && (
              <div className="space-y-4 mb-4 p-4 bg-gray-50 rounded-lg">
                <Label>Reasons for unable to record BP:</Label>
                <div className="space-y-2">
                  {["BP machine not available", "BP machine is damaged", "Batteries not available", "Other"].map(
                    (reason) => (
                      <div key={reason} className="flex items-center space-x-2">
                        <Checkbox
                          id={reason}
                          checked={formData.unable_to_record_bp_reasons.includes(reason)}
                          onCheckedChange={(checked) =>
                            handleMultiSelectChange("unable_to_record_bp_reasons", reason, checked as boolean)
                          }
                        />
                        <Label htmlFor={reason}>{reason}</Label>
                      </div>
                    ),
                  )}
                </div>
                {formData.unable_to_record_bp_reasons.includes("Other") && (
                  <div className="space-y-2">
                    <Label htmlFor="other_reason">Enter other reason:</Label>
                    <Input
                      id="other_reason"
                      placeholder="Specify other reason"
                      value={formData.unable_to_record_bp_other}
                      onChange={(e) => handleInputChange("unable_to_record_bp_other", e.target.value)}
                    />
                  </div>
                )}
              </div>
            )}

            {!formData.unable_to_record_bp && (
              <div className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="systolic">Systolic Blood Pressure (SBP)(mmHg) *</Label>
                    <Input
                      id="systolic"
                      type="number"
                      placeholder="Enter Systolic (mmHg)"
                      value={formData.systolic_blood_pressure}
                      onChange={(e) => handleInputChange("systolic_blood_pressure", e.target.value)}
                      required
                      className={
                        formData.systolic_blood_pressure &&
                        getBPCategory(
                          Number.parseInt(formData.systolic_blood_pressure),
                          Number.parseInt(formData.diastolic_blood_pressure) || 0,
                        ).severity === "critical"
                          ? "border-red-500"
                          : ""
                      }
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="diastolic">Diastolic Blood Pressure (DBP)(mmHg) *</Label>
                    <Input
                      id="diastolic"
                      type="number"
                      placeholder="Enter Diastolic (mmHg)"
                      value={formData.diastolic_blood_pressure}
                      onChange={(e) => handleInputChange("diastolic_blood_pressure", e.target.value)}
                      required
                      className={
                        formData.diastolic_blood_pressure &&
                        getBPCategory(
                          Number.parseInt(formData.systolic_blood_pressure) || 0,
                          Number.parseInt(formData.diastolic_blood_pressure),
                        ).severity === "critical"
                          ? "border-red-500"
                          : ""
                      }
                    />
                  </div>
                </div>

                {/* BP Status Indicator */}
                {formData.systolic_blood_pressure && formData.diastolic_blood_pressure && (
                  <div
                    className={`p-3 rounded-lg border ${
                      getBPStatusMessage(
                        Number.parseInt(formData.systolic_blood_pressure),
                        Number.parseInt(formData.diastolic_blood_pressure),
                      ).color === "red"
                        ? "bg-red-50 border-red-200 text-red-800"
                        : getBPStatusMessage(
                              Number.parseInt(formData.systolic_blood_pressure),
                              Number.parseInt(formData.diastolic_blood_pressure),
                            ).color === "orange"
                          ? "bg-orange-50 border-orange-200 text-orange-800"
                          : getBPStatusMessage(
                                Number.parseInt(formData.systolic_blood_pressure),
                                Number.parseInt(formData.diastolic_blood_pressure),
                              ).color === "yellow"
                            ? "bg-yellow-50 border-yellow-200 text-yellow-800"
                            : getBPStatusMessage(
                                  Number.parseInt(formData.systolic_blood_pressure),
                                  Number.parseInt(formData.diastolic_blood_pressure),
                                ).color === "blue"
                              ? "bg-blue-50 border-blue-200 text-blue-800"
                              : "bg-green-50 border-green-200 text-green-800"
                    }`}
                  >
                    <p className="font-medium">
                      {
                        getBPStatusMessage(
                          Number.parseInt(formData.systolic_blood_pressure),
                          Number.parseInt(formData.diastolic_blood_pressure),
                        ).message
                      }
                    </p>
                    <p className="text-sm mt-1">
                      Reading: {formData.systolic_blood_pressure}/{formData.diastolic_blood_pressure} mmHg
                    </p>
                  </div>
                )}

                {/* Follow-up BP measurements - Show if initial BP is abnormal */}
                {requiresFollowUpBP() && (
                  <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
                    <h4 className="font-medium text-blue-900 mb-3">
                      Follow-up Blood Pressure (After 10-15 minutes rest)
                    </h4>
                    <p className="text-sm text-blue-700 mb-4">
                      Initial BP reading indicates follow-up measurement is recommended. Please wait 10-15 minutes and
                      retake.
                    </p>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="sbp_after">SBP after 10-15 minutes rest</Label>
                        <Input
                          id="sbp_after"
                          type="number"
                          placeholder="Enter SBP after rest"
                          value={formData.sbp_after_10_to_15_minutes}
                          onChange={(e) => handleInputChange("sbp_after_10_to_15_minutes", e.target.value)}
                          className={formData.sbp_after_10_to_15_minutes && isBPAbnormal() ? "border-red-500" : ""}
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="dbp_after">DBP after 10-15 minutes rest</Label>
                        <Input
                          id="dbp_after"
                          type="number"
                          placeholder="Enter DBP after rest"
                          value={formData.dbp_after_10_to_15_minutes}
                          onChange={(e) => handleInputChange("dbp_after_10_to_15_minutes", e.target.value)}
                          className={formData.dbp_after_10_to_15_minutes && isBPAbnormal() ? "border-red-500" : ""}
                        />
                      </div>
                    </div>

                    {/* Second BP Status */}
                    {formData.sbp_after_10_to_15_minutes && formData.dbp_after_10_to_15_minutes && (
                      <div className="mt-4">
                        <div
                          className={`p-3 rounded-lg border ${
                            isBPAbnormal()
                              ? "bg-red-50 border-red-200 text-red-800"
                              : "bg-green-50 border-green-200 text-green-800"
                          }`}
                        >
                          <p className="font-medium">
                            Follow-up Reading: {formData.sbp_after_10_to_15_minutes}/
                            {formData.dbp_after_10_to_15_minutes} mmHg
                          </p>
                          <p className="text-sm mt-1">
                            {isBPAbnormal()
                              ? "ABNORMAL: BP remains elevated (≥140/90 mmHg) - Pre-eclampsia screening required"
                              : "NORMAL: BP has normalized"}
                          </p>
                          {hasSignificantBPChange() && (
                            <p className="text-sm mt-1 font-medium">
                              ⚠️ Significant change from initial reading detected
                            </p>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                )}

                {/* Pre-eclampsia screening - Only show if follow-up BP is abnormal */}
                {isBPAbnormal() && (
                  <div className="space-y-4 p-4 bg-red-50 rounded-lg border border-red-200">
                    <div className="flex items-center space-x-2 mb-3">
                      <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                      <h4 className="font-medium text-red-900">Pre-eclampsia Screening Required</h4>
                    </div>
                    <p className="text-sm text-red-700 mb-4">
                      Blood pressure remains ≥140/90 mmHg after rest. Please complete pre-eclampsia assessment.
                    </p>

                    <div className="space-y-2">
                      <Label className="text-red-900 font-medium">Any symptoms of severe pre-eclampsia:</Label>
                      <div className="space-y-2">
                        {[
                          "None",
                          "Severe headache",
                          "Visual disturbance",
                          "Epigastric pain",
                          "Dizziness",
                          "Vomitting",
                        ].map((symptom) => (
                          <div key={symptom} className="flex items-center space-x-2">
                            <Checkbox
                              id={symptom}
                              checked={formData.any_symptoms_of_pre_elampsia.includes(symptom)}
                              onCheckedChange={(checked) =>
                                handleMultiSelectChange("any_symptoms_of_pre_elampsia", symptom, checked as boolean)
                              }
                            />
                            <Label htmlFor={symptom} className="text-red-800">
                              {symptom}
                            </Label>
                          </div>
                        ))}
                      </div>
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="urine_dipstick" className="text-red-900 font-medium">
                        Urine dipstick result - protein:
                      </Label>
                      <Select
                        value={formData.urine_dipstick}
                        onValueChange={(value) => handleInputChange("urine_dipstick", value)}
                      >
                        <SelectTrigger className="border-red-300">
                          <SelectValue placeholder="Select protein level" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="None">None</SelectItem>
                          <SelectItem value="+">+ (Trace)</SelectItem>
                          <SelectItem value="++">++ (Mild)</SelectItem>
                          <SelectItem value="+++">+++ (Moderate)</SelectItem>
                          <SelectItem value="++++">++++ (Severe)</SelectItem>
                        </SelectContent>
                      </Select>
                      {formData.urine_dipstick && formData.urine_dipstick !== "None" && (
                        <p className="text-sm text-red-700 mt-1">
                          ⚠️ Proteinuria detected - Consider immediate medical evaluation
                        </p>
                      )}
                    </div>

                    {/* Risk Assessment */}
                    {(formData.any_symptoms_of_pre_elampsia.length > 1 ||
                      (formData.any_symptoms_of_pre_elampsia.length === 1 &&
                        !formData.any_symptoms_of_pre_elampsia.includes("None")) ||
                      (formData.urine_dipstick && formData.urine_dipstick !== "None")) && (
                      <div className="p-3 bg-red-100 border border-red-300 rounded-lg">
                        <p className="font-bold text-red-900">⚠️ HIGH RISK ALERT</p>
                        <p className="text-sm text-red-800 mt-1">
                          Patient shows signs of severe pre-eclampsia. Immediate medical attention recommended.
                        </p>
                      </div>
                    )}
                  </div>
                )}
              </div>
            )}
          </div>

          <Separator />

          {/* Vitals Section */}
          <div>
            <h3 className="text-lg font-medium mb-4">Vitals</h3>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
              <div className="space-y-2">
                <Label htmlFor="temperature">Temperature (°C) *</Label>
                <Input
                  id="temperature"
                  type="number"
                  step="0.1"
                  placeholder="Enter Temperature (°C)"
                  value={formData.temperature}
                  onChange={(e) => handleInputChange("temperature", e.target.value)}
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="pulse_rate">Pulse rate (bpm)</Label>
                <Input
                  id="pulse_rate"
                  type="number"
                  placeholder="Enter Pulse Rate (bpm)"
                  value={formData.pulse_rate}
                  onChange={(e) => handleInputChange("pulse_rate", e.target.value)}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="respiratory_rate">Respiratory rate</Label>
                <Input
                  id="respiratory_rate"
                  type="number"
                  placeholder="Enter Respiratory Rate"
                  value={formData.respiratory_rate}
                  onChange={(e) => handleInputChange("respiratory_rate", e.target.value)}
                />
              </div>
            </div>

            {/* Second temperature if first is abnormal */}
            {isTemperatureAbnormal() && (
              <div className="mb-4 p-4 bg-blue-50 rounded-lg border border-blue-200">
                <div className="space-y-2">
                  <Label htmlFor="second_temperature">Second Temperature after 30 minutes (°C)</Label>
                  <Input
                    id="second_temperature"
                    type="number"
                    step="0.1"
                    placeholder="Enter Second Temperature (°C)"
                    value={formData.second_temperature}
                    onChange={(e) => handleInputChange("second_temperature", e.target.value)}
                  />
                </div>
              </div>
            )}

            {/* Second pulse rate if first is abnormal */}
            {isPulseRateAbnormal() && (
              <div className="mb-4 p-4 bg-blue-50 rounded-lg border border-blue-200">
                <div className="space-y-2">
                  <Label htmlFor="second_pulse_rate">Second Pulse rate (bpm)</Label>
                  <Input
                    id="second_pulse_rate"
                    type="number"
                    placeholder="Enter Second Pulse Rate (bpm)"
                    value={formData.second_pulse_rate}
                    onChange={(e) => handleInputChange("second_pulse_rate", e.target.value)}
                  />
                </div>
              </div>
            )}

            {/* Unrecordable below pulse rate if second pulse rate is abnormal */}
            {isSecondPulseRateAbnormal() && (
              <div className="mb-4 p-4 bg-red-50 rounded-lg border border-red-200">
                <div className="space-y-2">
                  <Label>Unrecordable below pulse rate:</Label>
                  <div className="space-y-2">
                    {["Vomiting", "Diarrhoea", "Severe hypertension and other"].map((reason) => (
                      <div key={reason} className="flex items-center space-x-2">
                        <Checkbox
                          id={reason}
                          checked={formData.unrecordable_below_pulse_rate.includes(reason)}
                          onCheckedChange={(checked) =>
                            handleMultiSelectChange("unrecordable_below_pulse_rate", reason, checked as boolean)
                          }
                        />
                        <Label htmlFor={reason}>{reason}</Label>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {/* Second respiratory rate if first is abnormal */}
            {isRespiratoryRateAbnormal() && (
              <div className="mb-4 p-4 bg-blue-50 rounded-lg border border-blue-200">
                <div className="space-y-2">
                  <Label htmlFor="second_respiratory_rate">Second respiratory rate</Label>
                  <Input
                    id="second_respiratory_rate"
                    type="number"
                    placeholder="Enter Second Respiratory Rate"
                    value={formData.second_respiratory_rate}
                    onChange={(e) => handleInputChange("second_respiratory_rate", e.target.value)}
                  />
                </div>
              </div>
            )}

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="space-y-2">
                <Label htmlFor="oxygen_saturation">Oxygen Saturation (%)</Label>
                <Input
                  id="oxygen_saturation"
                  type="number"
                  placeholder="Enter Oxygen Saturation (%)"
                  value={formData.oxygen_saturation}
                  onChange={(e) => handleInputChange("oxygen_saturation", e.target.value)}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="muac">MUAC (Mid-Upper Arm Circumference)</Label>
                <Input
                  id="muac"
                  placeholder="Enter MUAC (cm) - Maternal nutrition assessment"
                  value={formData.muac}
                  onChange={(e) => handleInputChange("muac", e.target.value)}
                />
                <p className="text-xs text-gray-600">Normal: ≥23cm for pregnant women</p>
                {formData.muac && Number.parseFloat(formData.muac) < 23 && (
                  <div className="mt-2 p-3 bg-orange-50 border border-orange-200 rounded-lg">
                    <p className="text-sm font-medium text-orange-900">⚠️ MUAC Alert</p>
                    <p className="text-sm text-orange-700 mt-1">
                      MUAC &lt;23cm indicates risk of maternal malnutrition. Nutritional assessment recommended.
                    </p>
                  </div>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="head_circumference" className="text-gray-400">
                  Head Circumference (cm)
                </Label>
                <Input
                  id="head_circumference"
                  type="number"
                  step="0.1"
                  placeholder="Not applicable for pregnant women"
                  value=""
                  disabled
                  className="bg-gray-100 text-gray-400 cursor-not-allowed"
                />
                <p className="text-xs text-gray-500">⚠️ Not relevant for maternal assessment</p>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
              <div className="space-y-2">
                <Label htmlFor="abdominal_circumference">Abdominal Circumference (cm)</Label>
                <Input
                  id="abdominal_circumference"
                  type="number"
                  step="0.1"
                  placeholder="Enter Abdominal Circumference (cm)"
                  value={formData.abdominal_circumference}
                  onChange={(e) => handleInputChange("abdominal_circumference", e.target.value)}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="hc_score" className="text-gray-400">
                  HC Score
                </Label>
                <Input
                  id="hc_score"
                  placeholder="Not applicable for pregnant women"
                  value=""
                  disabled
                  className="bg-gray-100 text-gray-400 cursor-not-allowed"
                />
                <p className="text-xs text-gray-500">⚠️ Not relevant for maternal assessment</p>
              </div>
            </div>

            <div className="space-y-2 mt-4">
              <Label htmlFor="note">Note</Label>
              <Textarea
                id="note"
                placeholder="Enter Note"
                value={formData.note}
                onChange={(e) => handleInputChange("note", e.target.value)}
                rows={3}
              />
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex justify-end space-x-4 pt-4">
            <Button variant="outline" onClick={handleClose}>
              Close
            </Button>
            <Button onClick={handleSave}>Save</Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
